name: CI (use existing Dockerfile)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dockerized-ci:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: test
      CI: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build app image from existing Dockerfile
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: employee-leave:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Lint inside image (backend & frontend if present)
        run: |
          docker run --rm employee-leave:ci sh -lc '
            set -e
            [ -d backend ] && cd backend && npm run -s lint --if-present || true
            [ -d /app/backend ] && cd /app/backend && npm run -s lint --if-present || true
            [ -d frontend ] && cd frontend && npm run -s lint --if-present || true
            [ -d /app/frontend ] && cd /app/frontend && npm run -s lint --if-present || true
          '

      - name: Unit tests inside image (backend & frontend if present)
        run: |
          docker run --rm employee-leave:ci sh -lc '
            set -e
            [ -d backend ] && cd backend && npm test --if-present -- --run --reporter=default || true
            [ -d /app/backend ] && cd /app/backend && npm test --if-present -- --run --reporter=default || true
            [ -d frontend ] && cd frontend && npm test --if-present -- --run --reporter=default || true
            [ -d /app/frontend ] && cd /app/frontend && npm test --if-present -- --run --reporter=default || true
          '

      - name: Run container (detached) as in README
        run: |
          docker network create employee-network || true
          docker run -d --name app-ci --network employee-network -p 3000:3000 employee-leave:ci

      - name: Wait for app and smoke test
        run: |
          set -e
          for i in $(seq 1 60); do
            if curl -fsS http://localhost:3000/health || curl -fsS http://localhost:3000/; then
              echo "App is up"; break
            fi
            echo "Waiting app... $i"
            sleep 2
          done
          curl -fsS http://localhost:3000/ | head -c 200

      - name: Logs (on failure)
        if: failure()
        run: |
          docker logs app-ci || true

      - name: Cleanup
        if: always()
        run: |
          docker rm -f app-ci 2>/dev/null || true
          docker network rm employee-network 2>/dev/null || true
